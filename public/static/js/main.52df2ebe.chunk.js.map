{"version":3,"sources":["Upload.js","App.js","serviceWorker.js","index.js"],"names":["UploadFile","state","fileList","uploading","data","error","handleUpload","formData","FormData","forEach","file","append","setState","axios","url","method","processData","then","message","success","catch","err","response","this","props","multiple","accept","onRemove","index","indexOf","newFileList","slice","splice","beforeUpload","UploadOutlined","type","onClick","disabled","length","loading","style","marginTop","className","filename","Date","getTime","showIcon","Component","Header","Layout","Content","Footer","App","theme","mode","defaultSelectedKeys","Item","key","padding","height","margin","Upload","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"wZAsGeA,E,4MA/FXC,MAAQ,CACJC,SAAU,GACVC,WAAW,EACXC,KAAM,GACNC,MAAO,I,EAGXC,aAAe,WAAO,IACVJ,EAAa,EAAKD,MAAlBC,SACFK,EAAW,IAAIC,SACrBN,EAASO,SAAQ,SAAAC,GACbH,EAASI,OAAO,OAAQD,MAG5B,EAAKE,SAAS,CACVT,WAAW,IAIfU,IAAM,CACFC,IAAK,kBACLC,OAAQ,OACRC,aAAa,EACbZ,KAAMG,IACPU,MAAK,YAAe,IAAZb,EAAW,EAAXA,KACP,EAAKQ,SAAS,CACVV,SAAU,GACVC,WAAW,EACXC,OACAC,MAAO,KAEXa,IAAQC,QAAQ,6BACjBC,OAAM,SAACC,GACN,EAAKT,SAAS,CACVT,WAAW,EACXE,MAAOgB,EAAIC,SAASlB,KAAKiB,MAE7BH,IAAQb,MAAMgB,EAAIC,SAASlB,KAAKc,a,uDAI9B,IAAD,SAC2BK,KAAKtB,MAA7BE,EADH,EACGA,UAAWD,EADd,EACcA,SACbsB,EAAQ,CACVC,UAAU,EACVC,OAAQ,OACRC,SAAU,SAAAjB,GACN,EAAKE,UAAS,SAAAX,GACV,IAAM2B,EAAQ3B,EAAMC,SAAS2B,QAAQnB,GAC/BoB,EAAc7B,EAAMC,SAAS6B,QAEnC,OADAD,EAAYE,OAAOJ,EAAO,GACnB,CACH1B,SAAU4B,OAItBG,aAAc,SAAAvB,GAIV,OAHA,EAAKE,UAAS,SAAAX,GAAK,MAAK,CACpBC,SAAS,GAAD,mBAAMD,EAAMC,UAAZ,CAAsBQ,SAE3B,GAEXR,YAGJ,OACI,6BACI,kBAAC,IAAWsB,EACR,kBAAC,IAAD,KACI,kBAACU,EAAA,EAAD,MADJ,kBAIJ,kBAAC,IAAD,CACIC,KAAK,UACLC,QAASb,KAAKjB,aACd+B,SAA8B,IAApBnC,EAASoC,OACnBC,QAASpC,EACTqC,MAAO,CAAEC,UAAW,KAEnBtC,EAAY,aAAe,iBAEhC,kBAAC,UAAD,CACIuC,UAAU,UACVC,SAAQ,gBAAU,IAAIC,MAAOC,UAArB,QACRzC,KAAMmB,KAAKtB,MAAMG,KACjBiC,SAA8B,KAApBd,KAAKtB,MAAMG,MAJzB,YAQCmB,KAAKtB,MAAMI,OAAS,oCAAE,6BAAM,6BAAM,kBAAC,IAAD,CAAOa,QAASK,KAAKtB,MAAMI,MAAO8B,KAAK,QAAQW,UAAQ,U,GA1FjFC,aCAjBC,EAA4BC,IAA5BD,OAAQE,EAAoBD,IAApBC,QAASC,EAAWF,IAAXE,OAsBVC,MApBf,WACE,OACE,kBAAC,IAAD,CAAQV,UAAU,UAChB,kBAACM,EAAD,KACE,yBAAKN,UAAU,SACf,kBAAC,IAAD,CAAMW,MAAM,OAAOC,KAAK,aAAaC,oBAAqB,CAAC,MACzD,kBAAC,IAAKC,KAAN,CAAWC,IAAI,KAAf,UAGJ,kBAACP,EAAD,CAASV,MAAO,CAAEkB,QAAS,SAAUC,OAAQ,SAC3C,kBAAC,IAAD,CAAYnB,MAAO,CAAEoB,OAAQ,WAC3B,kBAAC,IAAWJ,KAAZ,cAEF,yBAAKd,UAAU,uBAAsB,kBAACmB,EAAD,QAEvC,kBAACV,EAAD,CAAQX,MAAO,CAAEsB,UAAW,WAA5B,2BCXcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzD,MAAK,SAAA0D,GACJA,EAAaC,gBAEdxD,OAAM,SAAAf,GACLwE,QAAQxE,MAAMA,EAAMa,c","file":"static/js/main.52df2ebe.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Upload, Button, message, Alert } from 'antd';\r\nimport { UploadOutlined } from '@ant-design/icons';\r\nimport { CSVLink } from \"react-csv\";\r\n\r\nclass UploadFile extends Component {\r\n    state = {\r\n        fileList: [],\r\n        uploading: false,\r\n        data: \"\",\r\n        error: \"\"\r\n    };\r\n\r\n    handleUpload = () => {\r\n        const { fileList } = this.state;\r\n        const formData = new FormData();\r\n        fileList.forEach(file => {\r\n            formData.append('docs', file);\r\n        });\r\n\r\n        this.setState({\r\n            uploading: true,\r\n        });\r\n\r\n        // You can use any AJAX library you like\r\n        axios({\r\n            url: '/api/v1/process',\r\n            method: 'post',\r\n            processData: false,\r\n            data: formData\r\n        }).then(({ data }) => {\r\n            this.setState({\r\n                fileList: [],\r\n                uploading: false,\r\n                data,\r\n                error: \"\"\r\n            });\r\n            message.success(\"Uploaded Successfully.\");\r\n        }).catch((err) => {\r\n            this.setState({\r\n                uploading: false,\r\n                error: err.response.data.err\r\n            });\r\n            message.error(err.response.data.message);\r\n        })\r\n    };\r\n\r\n    render() {\r\n        const { uploading, fileList } = this.state;\r\n        const props = {\r\n            multiple: true,\r\n            accept: '.csv',\r\n            onRemove: file => {\r\n                this.setState(state => {\r\n                    const index = state.fileList.indexOf(file);\r\n                    const newFileList = state.fileList.slice();\r\n                    newFileList.splice(index, 1);\r\n                    return {\r\n                        fileList: newFileList,\r\n                    };\r\n                });\r\n            },\r\n            beforeUpload: file => {\r\n                this.setState(state => ({\r\n                    fileList: [...state.fileList, file],\r\n                }));\r\n                return false;\r\n            },\r\n            fileList,\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                <Upload {...props}>\r\n                    <Button>\r\n                        <UploadOutlined /> Select Files\r\n                    </Button>\r\n                </Upload>\r\n                <Button\r\n                    type=\"primary\"\r\n                    onClick={this.handleUpload}\r\n                    disabled={fileList.length === 0}\r\n                    loading={uploading}\r\n                    style={{ marginTop: 16 }}\r\n                >\r\n                    {uploading ? 'Processing' : 'Start Process'}\r\n                </Button>\r\n                <CSVLink \r\n                    className=\"ant-btn\" \r\n                    filename={`data-${new Date().getTime()}.csv`} \r\n                    data={this.state.data} \r\n                    disabled={this.state.data === \"\"}\r\n                >\r\n                    Download\r\n                </CSVLink>\r\n                {this.state.error && <><br /><br /><Alert message={this.state.error} type=\"error\" showIcon /></>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UploadFile;","import React from 'react';\nimport { Layout, Menu, Breadcrumb } from 'antd';\n\nimport './App.css';\nimport UploadFile from './Upload';\n\nconst { Header, Content, Footer } = Layout;\n\nfunction App() {\n  return (\n    <Layout className=\"layout\">\n      <Header>\n        <div className=\"logo\" />\n        <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['1']}>\n          <Menu.Item key=\"1\">Home</Menu.Item>\n        </Menu>\n      </Header>\n      <Content style={{ padding: '0 50px', height: \"70vh\" }}>\n        <Breadcrumb style={{ margin: '16px 0' }}>\n          <Breadcrumb.Item>Home</Breadcrumb.Item>\n        </Breadcrumb>\n        <div className=\"site-layout-content\"><UploadFile /></div>\n      </Content>\n      <Footer style={{ textAlign: 'center' }}>Prototype for Harshad</Footer>\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}